# -*- coding: utf-8 -*-
"""mmr_trends_sdg3_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EF-ev2ggFOq7nyb1gFDrzUGnypqe4JHD
"""

# SDG 3: Good Health and Well-being
# Goal: Analyzing and predicting Maternal Mortality Ratio trends using Linear Regression

# Import libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Upload dataset
from google.colab import files
uploaded = files.upload()

# Loading the dataset and displaying the first few rows
df_raw = pd.read_csv('API_SH.STA.MMRT_DS2_en_csv_v2_656.csv', skiprows=4)
df_raw.head()

# Selecting data for Kenya, India and Germany from 2000 to 2020 and cleaning it for analysis
countries = ['Kenya', 'India', 'Germany']
df = df_raw[df_raw['Country Name'].isin(countries)]
df = df.loc[:, ['Country Name'] + [str(year) for year in range(2000, 2021)]]
df = df.set_index('Country Name').T
df = df.dropna()
df.head()

import pandas as pd

# Load and skip metadata rows
df_raw = pd.read_csv('API_SH.STA.MMRT_DS2_en_csv_v2_656.csv', skiprows=4)

# Keep only relevant countries
countries = ['Kenya', 'India', 'Germany']
df_filtered = df_raw[df_raw['Country Name'].isin(countries)]

# Keep only Year columns
df_years = df_filtered.loc[:, ['Country Name'] + [str(y) for y in range(2000, 2021)]]

# Reshape the DataFrame
df_melted = df_years.melt(id_vars='Country Name', var_name='Year', value_name='Mortality Rate')

# Pivot to get countries as columns
df = df_melted.pivot(index='Year', columns='Country Name', values='Mortality Rate').reset_index()

# Convert Year to numeric
df['Year'] = df['Year'].astype(int)

df.head()

# Preparing the data for each country by splitting it into training and testing sets
def prepare_country_data(country):
    X = df[['Year']]
    y = df[country]
    return train_test_split(X, y, test_size=0.2, random_state=42)

X_train_K, X_test_K, y_train_K, y_test_K = prepare_country_data('Kenya')
X_train_I, X_test_I, y_train_I, y_test_I = prepare_country_data('India')
X_train_G, X_test_G, y_train_G, y_test_G = prepare_country_data('Germany')

# Train the Linear Regression model and evaluate how well it predicts maternal mortality
# Show graph comparing the actual and predicted values for each country
def train_and_evaluate(X_train, X_test, y_train, y_test, country):
    model = LinearRegression()
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)

    print(f"Evaluation for {country}:")
    print("MAE:", mean_absolute_error(y_test, y_pred))
    print("RMSE:", np.sqrt(mean_squared_error(y_test, y_pred)))
    print("R² Score:", r2_score(y_test, y_pred))
    print()

# Plotting the actual vs predicted values
    plt.figure(figsize=(6, 4))
    plt.scatter(X_test, y_test, color='blue', label='Actual')
    plt.plot(X_test, y_pred, color='red', label='Predicted')
    plt.title(f'{country} Maternal Mortality Prediction')
    plt.xlabel('Year')
    plt.ylabel('Mortality Rate')
    plt.legend()
    plt.show()

# Running the function for each country
train_and_evaluate(X_train_K, X_test_K, y_train_K, y_test_K, 'Kenya')
train_and_evaluate(X_train_I, X_test_I, y_train_I, y_test_I, 'India')
train_and_evaluate(X_train_G, X_test_G, y_train_G, y_test_G, 'Germany')

# Importing extra machine learning models to try and compare with Linear Regression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor

# Models and Functions to train and evaluate
def compare_models(X_train, X_test, y_train, y_test):
    models = {
        'Linear Regression': LinearRegression(),
        'Decision Tree': DecisionTreeRegressor(random_state=42),
        'Random Forest': RandomForestRegressor(n_estimators=100, random_state=42)
    }

    results = {}

    for name, model in models.items():
        model.fit(X_train, y_train)
        y_pred = model.predict(X_test)

        results[name] = {
            'MAE': mean_absolute_error(y_test, y_pred),
            'RMSE': np.sqrt(mean_squared_error(y_test, y_pred)),
            'R2': r2_score(y_test, y_pred)
        }

        # Plotting
        plt.figure(figsize=(6, 4))
        plt.scatter(X_test, y_test, color='blue', label='Actual')
        plt.plot(X_test, y_pred, color='red', label='Predicted')
        plt.title(f'{name} - Maternal Mortality Prediction')
        plt.xlabel('Year')
        plt.ylabel('Mortality Rate')
        plt.legend()
        plt.show()

    return pd.DataFrame(results).T

# Results and Print
results_kenya = compare_models(X_train_K, X_test_K, y_train_K, y_test_K)
print("Model Comparison for Kenya:")
results_kenya

# Importing extra machine learning models to try and compare with Linear Regression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor

# Models and Functions to train and evaluate
def compare_models(X_train, X_test, y_train, y_test):
    models = {
        'Linear Regression': LinearRegression(),
        'Decision Tree': DecisionTreeRegressor(random_state=42),
        'Random Forest': RandomForestRegressor(n_estimators=100, random_state=42)
    }

    results = {}

    for name, model in models.items():
        model.fit(X_train, y_train)
        y_pred = model.predict(X_test)

        results[name] = {
            'MAE': mean_absolute_error(y_test, y_pred),
            'RMSE': np.sqrt(mean_squared_error(y_test, y_pred)),
            'R2': r2_score(y_test, y_pred)
        }

        # Plotting
        plt.figure(figsize=(6, 4))
        plt.scatter(X_test, y_test, color='blue', label='Actual')
        plt.plot(X_test, y_pred, color='red', label='Predicted')
        plt.title(f'{name} - Maternal Mortality Prediction')
        plt.xlabel('Year')
        plt.ylabel('Mortality Rate')
        plt.legend()
        plt.show()

    return pd.DataFrame(results).T

# Results and Print
results_india = compare_models(X_train_I, X_test_I, y_train_I, y_test_I)
print("Model Comparison for India:")
results_india

# Importing extra machine learning models to try and compare with Linear Regression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor

# Models and Functions to train and evaluate
def compare_models(X_train, X_test, y_train, y_test):
    models = {
        'Linear Regression': LinearRegression(),
        'Decision Tree': DecisionTreeRegressor(random_state=42),
        'Random Forest': RandomForestRegressor(n_estimators=100, random_state=42)
    }

    results = {}

    for name, model in models.items():
        model.fit(X_train, y_train)
        y_pred = model.predict(X_test)

        results[name] = {
            'MAE': mean_absolute_error(y_test, y_pred),
            'RMSE': np.sqrt(mean_squared_error(y_test, y_pred)),
            'R2': r2_score(y_test, y_pred)
        }

        # Plotting
        plt.figure(figsize=(6, 4))
        plt.scatter(X_test, y_test, color='blue', label='Actual')
        plt.plot(X_test, y_pred, color='red', label='Predicted')
        plt.title(f'{name} - Maternal Mortality Prediction')
        plt.xlabel('Year')
        plt.ylabel('Mortality Rate')
        plt.legend()
        plt.show()

    return pd.DataFrame(results).T

# Results and Print
results_germany = compare_models(X_train_G, X_test_G, y_train_G, y_test_G)
print("Model Comparison for Germany:")
results_germany

# Plotting the maternal mortality rates from 2000 to 2020 for Kenya, India and Germany.
plt.figure(figsize=(10, 6))
for country in ['Kenya', 'India', 'Germany']:
    plt.plot(df['Year'], df[country], label=country)

plt.title("Maternal Mortality Rate (2000–2020)")
plt.xlabel("Year")
plt.ylabel("Mortality Rate (per 100,000 live births)")
plt.legend()
plt.grid(True)
plt.show()

# Create a bar chart to compare how different models performed on Kenya's data.
results_kenya.plot(kind='bar', figsize=(10, 6))
plt.title('Model Performance Comparison - Kenya')
plt.ylabel('Score')
plt.xticks(rotation=0)
plt.grid(True, axis='y')
plt.show()

# Create a bar chart to compare how different models performed on India's data.
results_india.plot(kind='bar', figsize=(10, 6))
plt.title('Model Performance Comparison - India')
plt.ylabel('Score')
plt.xticks(rotation=0)
plt.grid(True, axis='y')
plt.show()

# Create a bar chart to compare how different models performed on Germany's data.
results_germany.plot(kind='bar', figsize=(10, 6))
plt.title('Model Performance Comparison - Germany')
plt.ylabel('Score')
plt.xticks(rotation=0)
plt.grid(True, axis='y')
plt.show()